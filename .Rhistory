data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
cv_master
cv_master$HParams
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
gc()
library(tidyverse)
library(lmerTest)
library(broom.mixed)
library(e1071)
library(caret)
library(glmnet)
library(cvms)
library(groupdata2)
library(tidymodels)
#install.packages("pROC")
library(pROC)
raw_dat <- read_csv("https://raw.githubusercontent.com/EyesOfKasparov/methods3_A3/master/finalish_data.csv")
logit2prob <- function(x) {
# https://www.wolframalpha.com/input/?i=log%28p%2F%281-p%29%29+%3D+x+isolate+p
exp(x) / (1+exp(x))
}
predict_to_tibble <- function(model) {
predict(model, re.form=NA, type="response") %>%
as_tibble() %>%
mutate(row_num = row_number(),
pred = if_else(value > 0.5, "Schizophrenia", "Control")) %>%
select(row_num, pred)
}
my_auc <- function(obs, pred) {
Metrics::auc(as.numeric(obs), as.numeric(pred))
}
normalize <- function(x) {
(x-mean(x, na.rm = T)) / sd(x, na.rm = T)
}
danish_dat <- raw_dat %>%
filter(Language == "Danish") %>%
rename(pitch_variability = freq_iqr) %>%
mutate(Diagnosis = as_factor(Diagnosis)) %>%
select(-c(file_name, diagnosis, Participant.x, trial_nr, soundname, Study, Language, Participant.y, Gender))
names(danish_dat)
tidy_lasso_log_model <- function(train_data, formula, hyperparameters) {
hyperparameters <- update_hyperparameters(hyperparameters = hyperparameters, required = "lambda")
lasso_model <-
logistic_reg(penalty = hyperparameters[["lambda"]], mixture = 1) %>%
set_engine("glmnet") %>%
fit(formula, train_data)
lasso_model
}
tidy_lasso_predict <- function(test_data, model, formula, hyperparameters, train_data) {
predict(test_model, test_data, type = "prob") %>%
# Schizophrenia
pull(2)
}
hparams <- list("lambda" = c(0.1, 1))
fold_data_master <- fold_model_data %>%
rename(ASD = "ASD (speakingtime/nsyll)",
articulation = "articulation rate (nsyll / phonationtime)",
speechrate = "speechrate (nsyll/dur)",
phonationtime = "phonationtime (s)",
dur = "dur (s)") %>%
select(-real_ID)
fold_model_data <- danish_dat %>%
mutate(real_ID = as_factor(real_ID)) %>%
fold(
data = ., k = 10,
cat_col = 'Diagnosis',
id_col = 'real_ID',
num_fold_cols = 3,
handle_existing_fold_cols = "keep"
)
fold_data_master <- fold_model_data %>%
rename(ASD = "ASD (speakingtime/nsyll)",
articulation = "articulation rate (nsyll / phonationtime)",
speechrate = "speechrate (nsyll/dur)",
phonationtime = "phonationtime (s)",
dur = "dur (s)") %>%
select(-real_ID)
tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 1))
model2 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 10))
model1 == model2
model1 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 1))
model1 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 1))
model2 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 10))
model1 == model2
testthat::expect_identical(model1, model2)
model1
summary(model1)
model1
model1$fit
coef(model1)
coef(model1)
model1 %>%
broom::tidy()
model2 %>%
broom::tidy()
model1 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 0.001))
model1 %>%
broom::tidy()
names(fold_data_master)
fold_data_master %>%
select(!starts_with(".folds"))
fold_data_master %>%
select(!starts_with(".folds")) %>%
names()
tidy_lasso_log_model <- function(train_data, formula, hyperparameters) {
hyperparameters <- update_hyperparameters(hyperparameters = hyperparameters, required = "lambda")
# Removes folds as predictors
real_train <- train_data %>%
select(!starts_with(".fold"))
lasso_model <-
logistic_reg(penalty = hyperparameters[["lambda"]], mixture = 1) %>%
set_engine("glmnet") %>%
fit(formula, real_train)
lasso_model
}
tidy_lasso_predict <- function(test_data, model, formula, hyperparameters, train_data) {
predict(test_model, test_data, type = "prob") %>%
# Schizophrenia
pull(2)
}
hparams <- list("lambda" = c(0.1, 1))
model1 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 0.001))
model1 %>%
broom::tidy()
remove_folds <- function(data) {
data %>%
select(!starts_with(".fold"))
}
remove_folds <- function(dat) {
dat %>%
select(!starts_with(".fold"))
}
remove_folds <- function(dat) {
dat %>%
select(!starts_with(".fold"))
}
tidy_lasso_log_model <- function(train_data, formula, hyperparameters) {
hyperparameters <- update_hyperparameters(hyperparameters = hyperparameters, required = "lambda")
lasso_model <-
logistic_reg(penalty = hyperparameters[["lambda"]], mixture = 1) %>%
set_engine("glmnet") %>%
fit(formula, remove_folds(train_data))
lasso_model
}
tidy_lasso_predict <- function(test_data, model, formula, hyperparameters, train_data) {
predict(test_model, remove_folds(test_data), type = "prob") %>%
# Schizophrenia
pull(2)
}
model1 <- tidy_lasso_log_model(fold_data_master, Diagnosis ~ ., list("lambda" = 0.001))
model1 %>%
broom::tidy()
hparams <- list("lambda" = 10^seq(-5, -1, length.out = 10))
fold_data_master <- fold_model_data %>%
rename(ASD = "ASD (speakingtime/nsyll)",
articulation = "articulation rate (nsyll / phonationtime)",
speechrate = "speechrate (nsyll/dur)",
phonationtime = "phonationtime (s)",
dur = "dur (s)") %>%
select(-real_ID)
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
remove_folds <- function(dat) {
dat %>%
select(!starts_with(".fold"))
}
remove_folds <- function(dat) {
dat %>%
select(!starts_with(".fold"))
}
tidy_lasso_log_model <- function(train_data, formula, hyperparameters) {
hyperparameters <- update_hyperparameters(hyperparameters = hyperparameters, required = "lambda")
lasso_model <-
logistic_reg(penalty = hyperparameters[["lambda"]], mixture = 1) %>%
set_engine("glmnet") %>%
fit(formula, remove_folds(train_data))
lasso_model
}
tidy_lasso_predict <- function(test_data, model, formula, hyperparameters, train_data) {
predict(model, remove_folds(test_data), type = "prob") %>%
# Schizophrenia
pull(2)
}
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
install.packages("doParallel")
#install.packages("doParallel")
library(doParallel)
registerDoParallel(4)
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial",
parallel = TRUE
)
library(tidyverse)
library(lmerTest)
library(broom.mixed)
library(e1071)
library(caret)
library(glmnet)
library(cvms)
library(groupdata2)
library(tidymodels)
#install.packages("pROC")
library(pROC)
raw_dat <- read_csv("https://raw.githubusercontent.com/EyesOfKasparov/methods3_A3/master/finalish_data.csv")
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial",
parallel = TRUE
)
update_hyperparameters()
update_hyperparameters
tidy_lasso_log_model <- function(train_data, formula, hyperparameters) {
lasso_model <-
logistic_reg(penalty = hyperparameters[["lambda"]], mixture = 1) %>%
set_engine("glmnet") %>%
fit(formula, remove_folds(train_data))
lasso_model
}
tidy_lasso_predict <- function(test_data, model, formula, hyperparameters, train_data) {
predict(model, remove_folds(test_data), type = "prob") %>%
# Schizophrenia
pull(2)
}
fold_data_master <- fold_model_data %>%
rename(ASD = "ASD (speakingtime/nsyll)",
articulation = "articulation rate (nsyll / phonationtime)",
speechrate = "speechrate (nsyll/dur)",
phonationtime = "phonationtime (s)",
dur = "dur (s)") %>%
select(-real_ID)
registerDoParallel(4)
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial",
parallel = TRUE
)
hparams <- list("lambda" = 10^seq(-5, -1, length.out = 2))
hparams
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
View(cv_master)
tidy_lasso_log_model <- function(train_data, formula, hyperparameters) {
lasso_model <-
logistic_reg(penalty = hyperparameters[["lambda"]], mixture = 1) %>%
set_engine("glmnet") %>%
fit(formula, train_data)
lasso_model
}
tidy_lasso_predict <- function(test_data, model, formula, hyperparameters, train_data) {
predict(model, test_data, type = "prob") %>%
# Schizophrenia
pull(2)
}
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
fold_data_master %>%
summarise(across(everything(), ~sum(is.na(.x))))
fold_data_master %>%
group_by(Diagnosis) %>%
summarise(n_na = ~sum(is.na(x)))
fold_data_master %>%
group_by(Diagnosis) %>%
summarise(n_na = ~sum(is.na(.x)))
fold_data_master %>%
group_by(Diagnosis) %>%
summarise(n_na = sum(is.na(SAPS)))
fold_data_master %>%
summarise(across(everything(), ~sum(is.na(.x))))
?select_if
fold_data_master %>%
select(where(~mean(is.na(.x)) > 0.3))
fold_data_master %>%
select(where(~mean(is.na(.x)) < 0.3))
fold_data_master %>%
select(where(~mean(is.na(.x)) < 0.1))
fold_data_master <- fold_model_data %>%
rename(ASD = "ASD (speakingtime/nsyll)",
articulation = "articulation rate (nsyll / phonationtime)",
speechrate = "speechrate (nsyll/dur)",
phonationtime = "phonationtime (s)",
dur = "dur (s)") %>%
select(-real_ID) %>%
select(where(~mean(is.na(.x)) < 0.1))
fold_data_master <- fold_model_data %>%
rename(ASD = "ASD (speakingtime/nsyll)",
articulation = "articulation rate (nsyll / phonationtime)",
speechrate = "speechrate (nsyll/dur)",
phonationtime = "phonationtime (s)",
dur = "dur (s)") %>%
select(-real_ID) %>%
select(where(~mean(is.na(.x)) < 0.1)) %>%
drop_na()
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
cv_master
hparams <- list("lambda" = 10^seq(-5, -1, length.out = 10))
cv_master <-
cross_validate_fn(
data = fold_data_master,
formulas = "Diagnosis ~ .",
model_fn = tidy_lasso_log_model,
predict_fn = tidy_lasso_predict,
preprocess_fn = preprocess_functions("standardize"),
fold_cols = paste0(".folds_", 1:3),
hyperparameters = hparams,
type = "binomial"
)
cv_master
cv_master %>%
arrange(-AUC)
cv_master %>%
arrange(-AUC) %>%
top_n()
cv_master %>%
arrange(-AUC) %>%
top_n(1)
cv_master %>%
filter(AUC = max(AUC))
cv_master %>%
filter(AUC == max(AUC))
best_model <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(Coefficients)
best_model
best_model <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)
best_model
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
pull(lambda)
cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
pull(1)
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
as_tibble() %>%
pull(1)
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
as_tibble()
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)
best_lambda
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)[[1]]
cv_master
cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)
cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)[[1]]
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams)
best_lambda
best_lambda[[1]]
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
unlist()
best_lambda[[1]]
best_lambda
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
unlist()[1]
best_lambda <- cv_master %>%
filter(AUC == max(AUC)) %>%
pull(HParams) %>%
unlist()
best_lambda
cv_master %>%
filter(AUC == max(AUC))
cv_master %>%
filter(AUC == max(AUC)) %>%
pull(coefficients())
cv_master %>%
filter(AUC == max(AUC)) %>%
pull(Coefficients)
tidy_lasso_log_model(remove_folds(fold_data_master), Diagnosis ~ ., list("lambda" = best_lambda))
best_model <- tidy_lasso_log_model(remove_folds(fold_data_master), Diagnosis ~ ., list("lambda" = best_lambda))
coef(best_model)
best_model
best_model %>%
tidy
best_model %>%
tidy %>%
filter(estimate > 0)
best_model %>%
tidy
best_model %>%
tidy %>%
filter(estimate > 0)
testy <- best_model %>%
tidy %>%
filter(estimate > 0)
testy <- best_model %>%
tidy %>%
ungroup() %>%
filter(estimate > 0)
testy
testy <- best_model %>%
tidy
best_model %>%
tidy %>%
filter(estimate != 0)
best_model %>%
tidy %>%
filter(estimate != 0) %>%
arrange(desc(estimate))
best_model %>%
tidy %>%
filter(estimate != 0) %>%
arrange(desc(abs(estimate)))
best_model %>%
augment
best_model %>%
glance
predict(best_model)
predict(remove_folds(best_model))
best_model %>%
tidy %>%
filter(estimate != 0) %>%
arrange(desc(abs(estimate)))
